<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-19T13:48:40.191Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Olivier Grech</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Making a barebone platformer with Löve - Part 1</title>
    <link href="http://yoursite.com/2017/06/19/Making-a-barebone-platformer-with-L%C3%B6ve/"/>
    <id>http://yoursite.com/2017/06/19/Making-a-barebone-platformer-with-Löve/</id>
    <published>2017-06-19T09:29:37.000Z</published>
    <updated>2017-06-19T13:48:40.191Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Löve</strong> is a nice framework for developing games in Lua. While it is somewhat limited compared to other frameworks, it makes it well suited for beginners. This article is written as an introduction to Löve. I’ll assume you understand the basics of programmation, such as variables, functions, and loops, but otherwise there’s no prior knowledge recquired. The Lua syntax is very simple, so you can learn as you go. For more details, go to the official <a href="https://www.lua.org/pil/1.html" target="_blank" rel="external">Lua website</a>.</p>
<p>Löve includes the physic engine <strong>Box2D</strong> by default. I challenged myself to create the basis for a simple platformer WITHOUT using Box2D. I mostly drew inspiration from <a href="http://gamemakertutorials.com/?p=383" target="_blank" rel="external">this tutorial</a>, which was written for GameMaker. However, it uses some concepts specifics to GameMaker, so there were some adjustments to make. </p>
<p>I wanted the final code to be as short as possible. I managed to make it under 150 lines, but I took some shortcuts and not everything is as structured as it should be. Feel free to send me suggestions on how to improve it.</p>
<h2 id="Installing-and-running-Love"><a href="#Installing-and-running-Love" class="headerlink" title="Installing and running Löve"></a>Installing and running Löve</h2><p>First, go to the <a href="https://love2d.org/" target="_blank" rel="external">Löve website</a> and download and install the last version of Löve. Make sure to create a shortcut to it on your desktop. Then, create an empty folder (name it whatever you want) and create an empty file called <em>main.lua</em> within this folder. If you want to make sure everything is set up correctly, copy and paste the following code into the main.lua file:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">love.draw</span><span class="params">()</span></span></div><div class="line">    love.graphics.<span class="built_in">print</span>(<span class="string">"Hello World!"</span>, <span class="number">400</span>, <span class="number">300</span>)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Then, drag and drop your folder into the Löve icon on your desktop. If you did everything properly, a black window with “Hello World!” written in white should open.</p>
<h2 id="Drawing-the-level"><a href="#Drawing-the-level" class="headerlink" title="Drawing the level"></a>Drawing the level</h2><p>The first step in our tutorial is to draw some platforms on screen, as well as the player character. To begin with, we need to examine the structure of a Löve program. let’s copy and paste this code into the main.lua file:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">love.load</span><span class="params">()</span></span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">love.update</span><span class="params">(dt)</span></span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">love.draw</span><span class="params">()</span></span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>These three functions are the core of a game wrote with Löve. Let’s examine them independantly:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">love.load</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<p><code>love.load</code> is the first function called when the game is launched. In other words, the code written between <code>function love.load</code> and <code>end</code> will be the first code to be executed. <code>love.load</code> is only executed once, and is mostly used for initializing values. For example, you could write <code>player.hp = 100</code> to initialize the player hit points to 100 when the game is launched.</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">love.update</span><span class="params">(dt)</span></span></div></pre></td></tr></table></figure>
<p><code>love.update</code> is called every frame while the game is running. For example, if you wrote <code>player.hp = player.hp + 1</code> within this function, then the player would regain one hit point every frame. The <code>dt</code> parameter indicates the time elapsed between the current and the previous frame, and can be used for some calculations (though we won’t use it in this tutorial).</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">love.draw</span><span class="params">()</span></span></div></pre></td></tr></table></figure>
<p><code>love.draw</code> is also called every frame. It is used for, you guessed it, drawing things to the screen. You’ve maybe noticed that in the “Hello World!” example, the code to actually draw the text to the screen was within the <code>love.draw</code> function. It wouldn’t have worked if it was within the <code>love.update</code> function.</p>
<p>Let’s get started by defining some coordinates for our platforms. We’ll create a new Lua object for each platform. Like this:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">platform1 = &#123;x = <span class="number">500</span>, y = <span class="number">500</span>, w = <span class="number">50</span>, h = <span class="number">30</span>&#125;</div></pre></td></tr></table></figure>
<p>Here I’m creating an object called <code>platform1</code>. This object has 4 parameters: <code>x</code>, <code>y</code>, <code>w</code>, <code>h</code>. These names are purely arbitrary, and I could have named them however I wanted. Since I want this code to only be called once at the start of the game, I put it in <code>love.load</code>:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">love.load</span><span class="params">()</span></span></div><div class="line">	platform1 = &#123;x = <span class="number">250</span>, y = <span class="number">500</span>, w = <span class="number">50</span>, h = <span class="number">30</span>&#125;</div><div class="line">	platform2 = &#123;x = <span class="number">500</span>, y = <span class="number">500</span>, w = <span class="number">50</span>, h = <span class="number">30</span>&#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Now I would like to draw these platforms to the screen. Luckily, Löve provides a function called <code>love.graphics.rectangle</code>, which can be called within the <code>love.draw</code> function, like this:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">love.draw</span><span class="params">()</span></span></div><div class="line">	love.graphics.rectangle(<span class="string">"fill"</span>, x, y, width, height )</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p><code>&quot;fill&quot;</code> indicates that we want to draw a rectangle with a solid color. The rest is pretty straightforward: we just pass it the x and y coordinates where we want to draw the rectangle, as well as its width and its height. To draw our platforms, we can do something like this:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">love.draw</span><span class="params">()</span></span></div><div class="line">	love.graphics.rectangle(<span class="string">"fill"</span>, platform1.x, platform1.y, platform1.w, platform1.h)</div><div class="line">	love.graphics.rectangle(<span class="string">"fill"</span>, platform2.x, platform2.y, platform2.w, platform2.h)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Here’s the whole code so far. You can try to run it to see the result by yourself:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">love.load</span><span class="params">()</span></span></div><div class="line">	platform1 = &#123;x = <span class="number">250</span>, y = <span class="number">500</span>, w = <span class="number">50</span>, h = <span class="number">30</span>&#125;</div><div class="line">	platform2 = &#123;x = <span class="number">500</span>, y = <span class="number">500</span>, w = <span class="number">50</span>, h = <span class="number">30</span>&#125; </div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">love.update</span><span class="params">(dt)</span></span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">love.draw</span><span class="params">()</span></span></div><div class="line">	love.graphics.rectangle(<span class="string">"fill"</span>, platform1.x, platform1.y, platform1.w, platform1.h)</div><div class="line">	love.graphics.rectangle(<span class="string">"fill"</span>, platform2.x, platform2.y, platform2.w, platform2.h)</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Löve&lt;/strong&gt; is a nice framework for developing games in Lua. While it is somewhat limited compared to other frameworks, it make
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/05/27/hello-world/"/>
    <id>http://yoursite.com/2017/05/27/hello-world/</id>
    <published>2017-05-27T18:10:33.643Z</published>
    <updated>2017-05-27T18:10:33.644Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
